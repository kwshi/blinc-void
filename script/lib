# vi: ft=bash
# shellcheck shell=bash

VOID_VERSION='20210930'
VOID_REPO_URL="https://alpha.us.repo.voidlinux.org/live/$VOID_VERSION"
BUILDAH_NAME_PREFIX="blinc-void"

ROOT_DIR="$PWD"
TMP_DIR='/tmp/blinc'

BUILD_DIR="$ROOT_DIR/build"
DOWNLOAD_DIR="$BUILD_DIR/download"
VPKGS_DIR="$BUILD_DIR/download"

VOID_ROOTFS_FILENAME="void-x86_64-ROOTFS-$VOID_VERSION.tar.xz"

function log-with-prefix {
  echo $'\e[2m[blinc '"$(date +'%F %T %Z')"$']\e[m \e['"$1m""$2"$'\e[m' >&2
}

function log-phase { log-with-prefix '96;1' "PHASE: $1";     }
function log-done  { log-with-prefix '32;1' "DONE: $1"$'\n'; }
function log-err   { log-with-prefix '91;1' "ERR: $1";       }
function log       { log-with-prefix '36'   "$1";            }

function query_img_meta {
  local img date time offset
  if read -r img date time offset _ < <(
    buildah images --format '{{.ID}} {{.CreatedAtRaw}}' \
      "$BUILDAH_NAME_PREFIX/$1" \
      2> /dev/null
  ); then
    echo "$img $(date -d "$date $time $offset" +'%s')"
  else return 1; fi
}

function create_ctr {
  local ctr
  if ctr="$(buildah containers -q -f name="$BUILDAH_NAME_PREFIX/$1" 2> '/dev/null')" \
    && [[ -n "$ctr" ]]; then
    log "existing container ${ctr@Q}, overwriting"
    buildah rm "$ctr" > '/dev/null'
  fi
  buildah from --name "$BUILDAH_NAME_PREFIX/$1" "$2"
}

function phase_img {
  local img ctr from stamp parent parent_stamp

  log_phase "img/$1"

  if [[ "${3+_}" == '_' ]]; then from="$BUILDAH_NAME_PREFIX/$3"
  else from='scratch'; fi

}

# UNUSED
function fetch_opt {
  local out="$DOWNLOAD_DIR/opt/$1/$3"
  mkdir -p "$DOWNLOAD_DIR/opt/$1"

  if [[ -e "$out" ]]; then
    log 'download already exists, skipping'
    echo "$out"
    return
  fi

  log "fetching ${1@Q} (version ${2@Q})"
  curl -fsSL -o "$out" "$5"

  log "verifying checksum"
  sha256sum -c --quiet <<< "$4 $out"

  echo "$out"
}

function parse_args {
  while getopts 'fr:' arg; do
    case "$arg" in
      f) force=;;
      r) rebuild="$OPTARG";;
      *) log_err 'invalid option';;
    esac
  done
}

function recursive-mtime {
  local -i curr latest
  local -a paths
  local path
  latest="$(stat -c '%Y' "$1")"
  readarray -t paths < <(find "$1")
  for path in "${paths[@]}"; do
    curr="$(stat -c '%Y' "$path")"
    if (( curr > latest )); then latest=curr; fi
  done
  echo "$latest"
}



function list_dir {
  for f in "$1"/*; do
    echo "${f##*/}"
  done
}

function normalize_list {
  while read -r line; do
    line="${line%%#*}"
    read -ra ps <<< "$line"
    for pkg in "${ps[@]}"; do echo "$pkg"; done
  done
}

function init {
  set -euo pipefail
  parse_args "$@"
}

#init "$@"
