# vi: ft=bash 
# shellcheck shell=bash

VOID_REPO_URL='https://alpha.us.repo.voidlinux.org/live/current'
VOID_VERSION='20210218'
BUILDAH_NAME_PREFIX="blinc-void"

ROOT_DIR="$PWD"
TMP_DIR='/tmp/blinc'

BUILD_DIR="$ROOT_DIR/build"
DOWNLOAD_DIR="$BUILD_DIR/download"
VPKGS_DIR="$BUILD_DIR/download"

VOID_ROOTFS_FILENAME="void-x86_64-ROOTFS-$VOID_VERSION.tar.xz"

function _log_with_prefix {
  echo $'\e[2m[blinc '"$(date +'%F %T %Z')"$']\e[m \e['"$1m""$2"$'\e[m' >&2
}
function log_phase { _log_with_prefix '96;1' "PHASE: $1";     }
function log_done  { _log_with_prefix '32;1' "DONE: $1"$'\n'; }
function log_err   { _log_with_prefix '91;1' "ERR: $1";       }
function log       { _log_with_prefix '36'   "$1";            }

function query_img_meta {
  local img date time offset
  if read -r img date time offset _ < <(
    buildah images --format '{{.ID}} {{.CreatedAtRaw}}' \
      "$BUILDAH_NAME_PREFIX/$1" \
      2> /dev/null
  ); then
    echo "$img $(date -d "$date $time $offset" +'%s')"
  else return 1; fi
}

function phase_img {
  local img ctr from stamp parent parent_stamp

  log_phase "img/$1"

  if read -r img stamp < <(query_img_meta "$1"); then
    if [[ "${3+_}" == '_' ]] \
      && read -r parent parent_stamp < <(query_img_meta "$3") \
      && [[ "$parent_stamp" -gt "$stamp" ]]
    then
      log "existing image ${img@Q}, newer parent ${parent@Q}, overwriting"
    elif [[ "${4+_}" == '_' && "$4" =~ ^[0-9]+$ && "$4" -gt stamp ]]; then
      log "existing image ${img@Q}, newer source stamp, overwriting"
    elif [[ "${force+_}" == '_' || "${rebuild-}" == "img/$1" ]]; then
      log "existing image ${img@Q}, overwriting"
    else
      log 'image exists, skipping'
      log_done "img/$1"
      return
    fi
  fi

  if ctr="$(buildah containers -q -f name="$BUILDAH_NAME_PREFIX/$1" 2> /dev/null)" \
    && [[ -n "$ctr" ]]; then
    log "existing container ${ctr@Q}, overwriting"
    buildah rm "$ctr" > /dev/null
  fi

  if [[ "${3+_}" == '_' ]]; then from="$BUILDAH_NAME_PREFIX/$3"
  else from='scratch'; fi

  log 'creating container'
  ctr="$(buildah from --name "$BUILDAH_NAME_PREFIX/$1" "$from")"
  log "created container ${ctr@Q}"

  "$2" "$ctr"

  log 'committing container'
  buildah commit --rm "$ctr" "$BUILDAH_NAME_PREFIX/$1"

  log_done "img/$1"
}

function fetch_opt {
  local out="$DOWNLOAD_DIR/opt/$1/$3"
  mkdir -p "$DOWNLOAD_DIR/opt/$1"

  if [[ -e "$out" ]]; then
    log 'download already exists, skipping'
    echo "$out"
    return
  fi

  log "fetching ${1@Q} (version ${2@Q})"
  curl -fsSL -o "$out" "$5"

  log "verifying checksum"
  sha256sum -c --quiet <<< "$4 $out"

  echo "$out"
}

function parse_args {
  while getopts 'fr:' arg; do
    case "$arg" in
      f) force=;;
      r) rebuild="$OPTARG";;
      *) log_err 'invalid option';;
    esac
  done
}

function recursive_mtime {
  local f
  local -i curr latest
  latest="$(stat -c '%Y' "$1")"
  while read -r f; do 
    curr="$(stat -c '%Y' "$f")"
    if [[ curr -gt latest ]]; then latest=curr; fi
  done < <(find "$1")
  echo "$latest"
}

function init {
  set -euo pipefail
  parse_args "$@"
}

init "$@"
